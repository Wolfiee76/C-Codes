
#include <iostream>
#include <string>
#include<vector>
using namespace std;

// INHERITANCE, POLTMORPHISM

//create class product, which has fields name, price. add an abstrac moethod double gettotalprice().

// Create a class PhysicalProduct, which inherits Product and has one field – 
//shipping cost. Override GetTotalPrice() to calculate the total price as base
//price plus shipping cost.

//Create a class DigitalProduct, which inherits Product and has one field – 
//discount. Override GetTotalPrice() to calculate the total price as base price
//minus the discount.

//In main() function create a vector of pointers to Product objectsand fill it with
//3 instances of PhysicalProduct and 3 instances of the DigitalProduct
//classes.Use a loop to show the total price of each item in that vector.

class Product
{
public:
	Product(string n, double p)
	{
		name = n;
		price = p;
	}
	
	virtual double GetTotalPrice() = 0 {}

  protected:
	string name;
	double price;
};

class PhysicalProduct : public Product
{
public:
	PhysicalProduct(string n, double p, double sC) : Product(n,p)
	{
		shippingcost = sC;
	}

    double GetTotalPrice()
	{
		return price + shippingcost;
	}
	

private:
	double shippingcost;
};

class DigitalProduct : public Product
{
public:

	DigitalProduct(string n, double p, double d) : Product(n, p), discount(d)
	{

	}
	

	double GetTotalPrice()
	{
		return price - discount;
	}

private:
	double discount;
};


int main()
{
	vector <Product*> products;
	products.push_back(new PhysicalProduct("Apples", 2.99, 10));
	products.push_back(new PhysicalProduct("Pear", 5.99, 12));
	products.push_back(new PhysicalProduct("Melon", 7.99, 20));

	products.push_back(new DigitalProduct("DragonFruit", 2.99, 10));
	products.push_back(new DigitalProduct("Pinapple", 5.99, 12));
	products.push_back(new DigitalProduct("Banana", 2.99, 10));

	for (int i = 0; i < products.size(); i++)
	{
		cout << products[i]->GetTotalPrice() << endl;
	}
	

}
